Subject: [PATCH] 修复全量同步数据库时，目标数据库与源数据库不一致时获取数据库类型不一致的错误
---
Index: client-adapter/common/src/main/java/com/alibaba/otter/canal/client/adapter/support/Util.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client-adapter/common/src/main/java/com/alibaba/otter/canal/client/adapter/support/Util.java b/client-adapter/common/src/main/java/com/alibaba/otter/canal/client/adapter/support/Util.java
--- a/client-adapter/common/src/main/java/com/alibaba/otter/canal/client/adapter/support/Util.java	(revision ea8949298fc74310990f24c864db218c7ccac312)
+++ b/client-adapter/common/src/main/java/com/alibaba/otter/canal/client/adapter/support/Util.java	(revision 1f4d326bea570e0db95794d412075c478e7f05ea)
@@ -38,7 +38,7 @@
     public static Object sqlRS(DataSource ds, String sql, Function<ResultSet, Object> fun) {
         try (Connection conn = ds.getConnection();
                 Statement stmt = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)) {
-            stmt.setFetchSize(Integer.MIN_VALUE);
+            stmt.setFetchSize(0);
             try (ResultSet rs = stmt.executeQuery(sql)) {
                 return fun.apply(rs);
             }
@@ -52,7 +52,7 @@
         try (Connection conn = ds.getConnection()) {
             try (PreparedStatement pstmt = conn
                 .prepareStatement(sql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)) {
-                pstmt.setFetchSize(Integer.MIN_VALUE);
+                pstmt.setFetchSize(0);
                 if (values != null) {
                     for (int i = 0; i < values.size(); i++) {
                         pstmt.setObject(i + 1, values.get(i));
@@ -80,6 +80,8 @@
             consumer.accept(rs);
         } catch (SQLException e) {
             logger.error(e.getMessage(), e);
+            logger.error("sqlRs has error, sql: {} ", sql);
+
         }
     }
 
Index: client-adapter/rdb/src/main/java/com/alibaba/otter/canal/client/adapter/rdb/service/RdbEtlService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client-adapter/rdb/src/main/java/com/alibaba/otter/canal/client/adapter/rdb/service/RdbEtlService.java b/client-adapter/rdb/src/main/java/com/alibaba/otter/canal/client/adapter/rdb/service/RdbEtlService.java
--- a/client-adapter/rdb/src/main/java/com/alibaba/otter/canal/client/adapter/rdb/service/RdbEtlService.java	(revision ea8949298fc74310990f24c864db218c7ccac312)
+++ b/client-adapter/rdb/src/main/java/com/alibaba/otter/canal/client/adapter/rdb/service/RdbEtlService.java	(revision 1f4d326bea570e0db95794d412075c478e7f05ea)
@@ -59,9 +59,11 @@
             Map<String, Integer> columnType = new LinkedHashMap<>();
             DruidDataSource dataSource = (DruidDataSource) srcDS;
             String backtick = SyncUtil.getBacktickByDbType(dataSource.getDbType());
+            DruidDataSource targetDataSource = (DruidDataSource) targetDS;
+            String targetbacktick = SyncUtil.getBacktickByDbType(targetDataSource.getDbType());
 
             Util.sqlRS(targetDS,
-                "SELECT * FROM " + SyncUtil.getDbTableName(dbMapping, dataSource.getDbType()) + " LIMIT 1 ",
+                "SELECT * FROM " + SyncUtil.getDbTableName(dbMapping, targetDataSource.getDbType()) + SyncUtil.getLimitOneByDbType( targetDataSource.getDbType()),
                 rs -> {
                 try {
 
@@ -89,10 +91,10 @@
 
                     StringBuilder insertSql = new StringBuilder();
                     insertSql.append("INSERT INTO ")
-                        .append(SyncUtil.getDbTableName(dbMapping, dataSource.getDbType()))
+                        .append(SyncUtil.getDbTableName(dbMapping, targetDataSource.getDbType()))
                         .append(" (");
                     columnsMap
-                        .forEach((targetColumnName, srcColumnName) -> insertSql.append(backtick).append(targetColumnName).append(backtick).append(","));
+                        .forEach((targetColumnName, srcColumnName) -> insertSql.append(targetbacktick).append(targetColumnName).append(targetbacktick).append(","));
 
                     int len = insertSql.length();
                     insertSql.delete(len - 1, len).append(") VALUES (");
@@ -115,8 +117,8 @@
                             // 删除数据
                             Map<String, Object> pkVal = new LinkedHashMap<>();
                             StringBuilder deleteSql = new StringBuilder(
-                                "DELETE FROM " + SyncUtil.getDbTableName(dbMapping, dataSource.getDbType()) + " WHERE ");
-                            appendCondition(dbMapping, deleteSql, pkVal, rs, backtick);
+                                "DELETE FROM " + SyncUtil.getDbTableName(dbMapping, targetDataSource.getDbType()) + " WHERE ");
+                            appendCondition(dbMapping, deleteSql, pkVal, rs, targetbacktick);
                             try (PreparedStatement pstmt2 = connTarget.prepareStatement(deleteSql.toString())) {
                                 int k = 1;
                                 for (Object val : pkVal.values()) {
Index: client-adapter/rdb/src/main/java/com/alibaba/otter/canal/client/adapter/rdb/support/SyncUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client-adapter/rdb/src/main/java/com/alibaba/otter/canal/client/adapter/rdb/support/SyncUtil.java b/client-adapter/rdb/src/main/java/com/alibaba/otter/canal/client/adapter/rdb/support/SyncUtil.java
--- a/client-adapter/rdb/src/main/java/com/alibaba/otter/canal/client/adapter/rdb/support/SyncUtil.java	(revision ea8949298fc74310990f24c864db218c7ccac312)
+++ b/client-adapter/rdb/src/main/java/com/alibaba/otter/canal/client/adapter/rdb/support/SyncUtil.java	(revision 1f4d326bea570e0db95794d412075c478e7f05ea)
@@ -288,4 +288,24 @@
                 return "";
         }
     }
+    public static String getLimitOneByDbType(String dbTypeName){
+        DbType dbType = DbType.of(dbTypeName);
+        if (dbType == null) {
+            dbType = DbType.other;
+        }
+
+        // 只有当dbType为MySQL/MariaDB或OceanBase时返回limit
+        switch (dbType) {
+            case mysql:
+            case mariadb:
+            case oceanbase:
+                return " limit 1";
+            // 当dbType为oracle 时返回 where rownum<2
+
+            case oracle:
+                return " where rownum<2";
+            default:
+                return "";
+        }
+    }
 }
